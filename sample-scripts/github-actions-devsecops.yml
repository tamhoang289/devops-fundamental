name: Deploy Dev

on:
  push:
    branches:
      - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: '${{ github.repository }}'

jobs:
  sca: # Software Composition Analysis
    runs-on: ubuntu-latest
    name: SCA
    steps:
      - name: Checkout
        uses: actions/checkout@master
        
      - name: Run Snyk test
        uses: snyk/actions/node@master # For node projects, change accordingly
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}    
        with:
          command: test
         
      - name: Run Snyk monitor
        uses: snyk/actions/node@master # For node projects, change accordingly
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}    
        with:
          command: monitor
  
  sast: # Static Application Security Testing
    name: SAST
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        LC_ALL: "ru_RU.UTF-8"
      with:
        projectBaseDir: .
        args: >
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.verbose=true
          
    # Archive the SonarQube analysis report as an artifact
    - name: Archive SonarQube Report
      uses: actions/upload-artifact@v2
      with:
        name: sonarqube-report
        path: .scannerwork/report-task.txt
          
  sast_email_notification_job:
    name: EMAIL SAST
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Download SonarQube Report
        uses: actions/download-artifact@v2
        with:
          name: sonarqube-report
          
      - name: Install ssmtp and mailutils
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ssmtp mailutils
          echo "################ DEBUG ###############"
          echo $GITHUB_WORKSPACE
          find .
          echo "################ DEBUG ###############"

      - name: Configure ssmtp
        run: |
          echo "root=${{ secrets.GMAIL_USER }}" | sudo tee -a /etc/ssmtp/ssmtp.conf
          echo "mailhub=smtp.gmail.com:587" | sudo tee -a /etc/ssmtp/ssmtp.conf
          echo "AuthUser=${{ secrets.GMAIL_USER }}" | sudo tee -a /etc/ssmtp/ssmtp.conf
          echo "AuthPass=${{ secrets.GMAIL_APP_PASSWORD }}" | sudo tee -a /etc/ssmtp/ssmtp.conf
          echo "UseSTARTTLS=YES" | sudo tee -a /etc/ssmtp/ssmtp.conf
          echo "UseTLS=YES" | sudo tee -a /etc/ssmtp/ssmtp.conf
          echo "TLS_CA_Dir=/etc/ssl/certs" | sudo tee -a /etc/ssmtp/ssmtp.conf

      - name: Generate report
        run: |
          echo "Your SonarQube analysis report is ready. Check it out at ${SONAR_HOST_URL}" > report.txt
          echo "" >> report.txt
          echo "Security Scan Results:" >> report.txt
          cat report-task.txt >> report.txt 
          echo "" >> report.txt
          echo "Other relevant information can be added here." >> report.txt
          sed -i -e 's/$/\n/' report.txt 

      - name: Send email notification
        run: |
          mail -s "SonarQube Analysis Report" recipient@example.com < report.txt
  
  build:
    name: BUILD
#     needs: sca
    runs-on: ubuntu-latest
    environment: DEV
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: '${{ env.REGISTRY }}'
          username: tamgoldefy
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Extract metadata (tags, labels) for Docker FE'
        id: meta-fe
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-fe'

      - name: Build and push Docker image FE
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-fe:${{ github.sha }}'
          labels: '${{ steps.meta-fe.outputs.labels }}'
  
  deploy:
    name: DEPLOY
    needs: build
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        env:
            SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
            ARGS: "-rlgoDzvc -i --delete"
            SOURCE: "./docker-compose.yml"
            REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
            REMOTE_USER: ${{ secrets.REMOTE_USER }}
            TARGET: ${{ secrets.REMOTE_DIR }}/

      - name: Executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: '${{ secrets.REMOTE_HOST }}'
          username: '${{ secrets.REMOTE_USER }}'
          key:  '${{secrets.SSH_KEY}}'
          script: |
            docker system prune -f
            docker image prune -f -a
            sed -i -e "s/tagVersion/${{ github.sha }}/g" ${{ secrets.REMOTE_DIR }}/docker-compose.yml
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://${{ env.REGISTRY }} -u publisher --password-stdin
            docker-compose -f ${{ secrets.REMOTE_DIR }}/docker-compose.yml pull
            docker-compose -f ${{ secrets.REMOTE_DIR }}/docker-compose.yml up -d --remove-orphans

  dast: # Dynamic Application Security Testing
    runs-on: ubuntu-latest
    needs: deploy
    name: DAST 
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: security
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.8.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://dev.customdomain.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'